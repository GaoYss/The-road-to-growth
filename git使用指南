git clone ...     克隆下来
git branch -a     查看有哪些分支
git checkout develop   切换分支
git status        查看状态
git add ..        添加进仓库
git add -f ..     强制添加到本地仓库
git rm  ..        移除仓库中的文件
git commit -m  ...  提交到本地仓库
git push origin HEAD:refs/for/develop    推送到远端develop仓库
git pull      从远端仓库更新本地仓库

vi .gitignore     在文件里面配置不需要提交的文件
git check-ignore  检查gitignore文件哪里有问题
需要忽略的文件有  .idea   .gitignore  *.pyc    *.log
gitignore只能忽略那些原来没有被track(跟踪）的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。
配置语法
以斜杠“/”开头表示目录；
以星号“*”通配多个字符；
以问号“?”通配单个字符
以方括号“[]”包含单个字符的匹配列表；
以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。
注意： git 对于 .gitignore配置文件是按行从上到下进行规则匹配的

git reset HEAD^   回撤提交到远端仓库的
git commit   --amend        撤销上一次提交  并将暂存区文件重新提交
git checkout -- <file>     拉取暂存区文件 并将其替换成工作区文件
git reset HEAD  -- <file>  拉取最近一次提交到版本库的文件到暂存区  改操作不影响工作区
git diff           查看 workspace 与 index 的差别的
git diff --cached  查看 index 与 local repositorty 的差别的
git diff HEAD      查看 workspace 和 local repository 的差别的（HEAD 指向的是 local repository 中最新提交的版本）
git diff HEAD^     比较 workspace 与最新commit的前一次commit的差异
git diff HEAD~2 比较 workspace 与上2次提交的差异，相当于 git diff HEAD~2 HEAD~0，注意两个HEAD的位置，diff显示的结果

git 文档 :https://blog.csdn.net/GW569453350game/article/details/46998395
gitignore文件：https://github.com/github/gitignore/blob/master/Python.gitignore



1、gitignore规则不生效

.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。
解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:
git rm -r --cached .
git add .
git commit -m 'update .gitignore'

2、git忽略某个指定的文件(不从版本库中删除)
执行命令如下：
git update-index --assume-unchanged config.conf
用git status查看一下，已经得到了自己想要的效果

3、git取消忽略某个指定的文件
git update-index --no-assume-unchanged config.conf

4、将当前版本回退到上一个版本，命令如下：
git reset --hard HEAD^

5、 回退到上两个版本
git reset – hard HEAD^^

6、回退到指定版本
git log //显示从最近到最远的提交日志
git reset --hard commit_id //回退到指定版本

7、查看命令历史
git reflog

8、拉取暂存区文件并将其替换成工作区文件
gitcheckout-- <file>

9、跟踪取消，即把文件从git中拿出来，不再进行版本跟踪，但保留工作区的文件。
git rm - - cached filename

10、查看工作区和版本库里面最新版本的区别
git diff HEAD – readme.txt
git diff命令比较的是工作目录中当前文件与暂存区快照之间的差异，也就是修改之后还没有暂存起来的变化内容

11、将工作区的内容放入版本库的暂存区
git add readme.txt

12、将暂存区的内容提交到当前分支
git commit -m "git tracks changes"

13、显示工作目录和暂存区的状态
git status

14、删除一个文件
git rm test.txt


16、创建分支，然后切换到分支
git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
git branch dev
git checkout dev

17、查看当前分支
git branch
git branch命令会列出所有分支，当前分支前面会标一个*号

18、git merge命令用于合并指定分支到当前分支
git merge dev

19、删除本地分支
git branch -d dev

20、删除远程dev分支
git push origin :dev

22、查看远程库的信息
git remote 或 git remote -v

23、推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
git push origin master
如果要推送其他分支，比如dev，就改成：
git push origin dev

C:\code\code\wind\ziyuan\目录-华东师大版-初中-数学-九年级-下学期-19版-〈五三同步-19版〉.txt

1-思维导图.uxp
nwnuKnowledgeSystem

wget https://www.python.org/ftp/python/3.5.4/Python-3.5.4.tar.xz